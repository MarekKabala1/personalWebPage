---
import '../styles/retro.css';
import type { RetroTheme } from '../utils/themeManager';
import Navigation from '../components/Navigation.astro';
import { ClientRouter } from 'astro:transitions';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width, initial-scale=1.0' />
		<title>{title}</title>

		<link rel='preload' href='https://fonts.googleapis.com/css2?family=VT323&display=swap' as='style' />
		<link rel='preload' href='/src/assets/fonts/Chicago.ttf' as='font' type='font/ttf' crossorigin />

		<link rel='preload' href='/construction.gif' as='image' />
		<link rel='preload' href='/favicon.svg' as='image' />

		<link rel='preload' href='/src/styles/retro.css' as='style' />
		<link rel='preload' href='/src/styles/themes/win95.css' as='style' />
		<link rel='preload' href='/src/styles/themes/macos9.css' as='style' />
		<link rel='preload' href='/src/styles/themes/web1999.css' as='style' />
		<link rel='preload' href='/src/styles/themes/dark-retro.css' as='style' />

		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />

		<link rel='preconnect' href='https://fonts.googleapis.com' />
		<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
		<link href='https://fonts.googleapis.com/css2?family=VT323&display=swap' rel='stylesheet' media='print' onload="this.media='all'" />

		<noscript>
			<link href='https://fonts.googleapis.com/css2?family=VT323&display=swap' rel='stylesheet' />
		</noscript>

		<ClientRouter />
	</head>
	<body>
		<div class='layout-container'>
			<div class='retro-window theme-switcher'>
				<div class='retro-window-title retro-window-title-flex'>
					<p>Theme Switcher</p>
					<span>x</span>
				</div>
				<div class='theme-buttons'>
					<button class='retro-button' data-theme='win95'>üì∫ Windows 95</button>
					<button class='retro-button' data-theme='mac-os-9'>üçé Mac OS 9</button>
					<button class='retro-button' data-theme='web-1999'>üíæ Web 1999</button>
					<button class='retro-button' data-theme='dark-retro'>üéÆ Dark Retro</button>
				</div>
			</div>

			<Navigation />
			<div class='retro-window construction-container'>
				<div class='retro-window-title retro-window-title-flex'>
					<p>Under Construction</p>
					<span>x</span>
				</div>
				<div class='construction-wrapper'>
					<div class='blink under-construction'>
						üöß UNDER<br />CONSTRUCTION
					</div>
					<div class='blink under-construction'>
						üöß UNDER<br />CONSTRUCTION
					</div>
					<div class='blink under-construction'>
						üöß UNDER<br />CONSTRUCTION
					</div>
				</div>
			</div>

			<div class='retro-window main-content'>
				<div class='retro-window-title retro-window-title-flex'>
					<p>{title}</p>
					<span>x</span>
				</div>
				<div class='content-wrapper'>
					<div class='marquee'>
						<span>Welcome to my retro website! Thanks for visiting! Don't forget to sign my guestbook!</span>
					</div>

					<slot />

					<footer class='retro-footer'>
						<div class='visitor-counter'>
							Visitors: <span id='visitorCount'>0</span>
						</div>
						<div class='footer-badges'>
							<div class='retro-badge construction-footer'>
								üöß UNDER<br />CONSTRUCTION
							</div>
							<a href='#' class='retro-badge webring'>
								JOIN OUR<br />WEBRING
							</a>
						</div>
					</footer>
				</div>
			</div>
		</div>
	</body>
</html>

<script>
	import { setTheme, getTheme, applyTheme, type RetroTheme } from '../utils/themeManager';

	// Cache for prefetched themes and fonts
	const prefetchedThemes = new Set<string>();
	const prefetchedFonts = new Set<string>();
	const cachedUrls = new Map<string, string>();

	// Initialize theme and attach event listeners
	function initializeTheme() {
		const currentTheme = getTheme();
		applyTheme(currentTheme);
		updateActiveButton(currentTheme);
		attachThemeSwitchers();
	}

	// Function to cache a resource
	async function cacheResource(url: string, type: 'css' | 'font'): Promise<string> {
		if (cachedUrls.has(url)) {
			return cachedUrls.get(url)!;
		}

		try {
			const response = await fetch(url);
			const blob = await response.blob();
			const blobUrl = URL.createObjectURL(blob);
			cachedUrls.set(url, blobUrl);
			return blobUrl;
		} catch (error) {
			console.error(`Error caching ${type}:`, error);
			return url; // Fallback to original URL if caching fails
		}
	}

	// Function to cache all theme CSS files
	async function cacheAllThemeCSS() {
		const themeFiles = [
			'/src/styles/retro.css',
			'/src/styles/themes/win95.css',
			'/src/styles/themes/macos9.css',
			'/src/styles/themes/web1999.css',
			'/src/styles/themes/dark-retro.css',
		];

		for (const file of themeFiles) {
			if (!prefetchedThemes.has(file)) {
				const cachedUrl = await cacheResource(file, 'css');
				const link = document.createElement('link');
				link.rel = 'stylesheet';
				link.href = cachedUrl;
				document.head.appendChild(link);
				prefetchedThemes.add(file);
			}
		}
	}

	// Function to cache all fonts
	async function cacheAllFonts() {
		const fontFiles = ['/src/assets/fonts/Chicago.ttf'];

		for (const file of fontFiles) {
			if (!prefetchedFonts.has(file)) {
				const cachedUrl = await cacheResource(file, 'font');
				const style = document.createElement('style');
				style.textContent = `
					@font-face {
						font-family: 'Chicago';
						src: url('${cachedUrl}') format('truetype');
						font-weight: normal;
						font-style: normal;
						font-display: swap;
					}
				`;
				document.head.appendChild(style);
				prefetchedFonts.add(file);
			}
		}
	}

	function attachThemeSwitchers() {
		document.querySelectorAll('[data-theme]').forEach((button) => {
			button.replaceWith(button.cloneNode(true));

			const freshButton = document.querySelector(`[data-theme="${button.getAttribute('data-theme')}"]`);
			if (freshButton) {
				freshButton.addEventListener('click', (e) => {
					const theme = (e.target as HTMLElement).dataset.theme as RetroTheme;
					if (theme) {
						setTheme(theme);
						updateActiveButton(theme);
					}
				});
			}
		});
	}

	// Initialize everything on page load
	document.addEventListener('DOMContentLoaded', async () => {
		await Promise.all([cacheAllThemeCSS(), cacheAllFonts()]);
		initializeTheme();
	});

	// Re-initialize on Astro page transitions
	document.addEventListener('astro:after-swap', async () => {
		await Promise.all([cacheAllThemeCSS(), cacheAllFonts()]);
		initializeTheme();
	});

	function updateActiveButton(activeTheme: RetroTheme) {
		document.querySelectorAll('[data-theme]').forEach((button) => {
			button.setAttribute('data-active', (button.getAttribute('data-theme') === activeTheme).toString());
		});
	}

	// Simple visitor counter
	const visitorCount = localStorage.getItem('visitorCount') || '0';
	const newCount = parseInt(visitorCount) + 1;
	localStorage.setItem('visitorCount', newCount.toString());
	const counterElement = document.getElementById('visitorCount');
	if (counterElement) {
		counterElement.textContent = newCount.toString();
	}
</script>

<style>
	/* Theme switcher styles */
	.theme-buttons .retro-button.active {
		opacity: 1;
		transform: scale(1.05);
		border-width: 2px;
		font-weight: bold;
		box-shadow: inset 1px 1px #000000;
	}

	.theme-buttons .retro-button[data-active='true'] {
		background: var(--theme-secondary);
		color: var(--theme-primary);
		border-style: inset;
		transform: translateY(1px);
		box-shadow: inset 1px 1px 3px rgba(0, 0, 0, 0.2);
	}

	/* Under construction */
	.construction-container {
		margin-bottom: 20px;
	}
	.construction-wrapper {
		display: flex;
		justify-content: space-between;
		align-content: center;
		padding: 0 3rem;
	}

	/* Layout styles */
	.layout-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 20px;
	}

	.theme-switcher {
		margin-bottom: 20px;
	}

	.theme-buttons {
		padding: 10px;
		display: flex;
		gap: 10px;
	}

	.main-content {
		margin: 0 10px;
	}

	.content-wrapper {
		padding: 10px;
	}

	.retro-footer {
		text-align: center;
		margin-top: 20px;
	}

	.footer-badges {
		margin-top: 15px;
		display: flex;
		justify-content: center;
		gap: 10px;
		flex-wrap: wrap;
	}
	/* Global flex*/
	:global(.retro-window-title-flex) {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	/* Dark Retro Theme Specific Styles */

	:global(.theme-dark-retro) .retro-window {
		box-shadow: 4px 4px 0 var(--theme-accent);
		border-color: #00ff00;
	}

	:global(.theme-dark-retro) .retro-button {
		text-transform: uppercase;
		font-size: 0.9em;
		letter-spacing: 1px;
		transition: all 0.2s ease;
		font-weight: 500;
		border-color: #00ff00;
	}

	:global(.theme-dark-retro) (.retro-window-title ) {
		font-weight: 600;
		border-bottom-color: #00ff00;
	}

	:global(.theme-dark-retro) .retro-button:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 0 #00ff00;
	}

	:global(.theme-dark-retro) .retro-button:active {
		transform: translateY(2px);
		box-shadow: none;
	}

	:global(.theme-dark-retro) .visitor-counter {
		font-size: 1.1em;
		text-shadow: 1px 1px 0 #00ff00;
		letter-spacing: 1px;
	}

	:global(.theme-dark-retro) .retro-badge {
		border-color: #00ff00;
		box-shadow: 2px 2px 0 #00ff00;
	}

	/* Responsive styles */
	@media (max-width: 768px) {
		.layout-container {
			padding: 10px;
		}

		.theme-buttons {
			flex-direction: column;
		}

		:global(.theme-dark-retro) {
			font-size: 0.9em;
		}

		.footer-badges {
			gap: 5px;
		}
	}

	/* System fonts */
	@font-face {
		font-family: 'Chicago';
		src: url('/src/assets/fonts/Chicago.ttf') format('truetype');
		font-style: normal;
		font-display: swap;
	}

	/* Base theme variables */
	:root {
		--font-main: 'VT323', monospace;
		--font-win95: 'MS Sans Serif', 'Arial', sans-serif;
		--font-mac: 'Chicago', 'Arial', sans-serif;
	}

	/* Base styles */
	html,
	body {
		font-family: var(--font-main);
	}

	/* Theme-specific font assignments */
	.theme-win95,
	.theme-win95 *:not(script):not(style) {
		font-family: var(--font-win95) !important;
	}

	.theme-mac-os-9,
	.theme-mac-os-9 *:not(script):not(style) {
		font-family: var(--font-mac) !important;
	}

	.theme-web-1999,
	.theme-web-1999 *:not(script):not(style),
	.theme-dark-retro,
	.theme-dark-retro *:not(script):not(style) {
		font-family: var(--font-main) !important;
	}

	/* Dark Retro Theme text colors */
	.theme-dark-retro,
	.theme-dark-retro *:not(script):not(style) {
		color: #00ff00;
	}

	.theme-dark-retro .retro-button {
		color: #00ff00;
		text-shadow: 0 0 5px #00ff00;
	}

	.theme-dark-retro .retro-window-title {
		color: #ffffff;
		text-shadow: 0 0 5px #00ff00;
	}

	/* Adjust font sizes for specific themes */
	.theme-win95 .retro-window-title,
	.theme-win95 .retro-button,
	.theme-mac-os-9 .retro-window-title,
	.theme-mac-os-9 .retro-button {
		font-size: 0.7em;
	}

	/* Windows 95 theme */
	.theme-win95 {
		font-family: var(--font-win95);
	}

	.theme-win95 .retro-window-title,
	.theme-win95 .retro-button {
		font-family: var(--font-win95);
		font-size: 0.8em;
	}

	/* Mac OS 9 theme */
	.theme-mac-os-9 {
		font-family: var(--font-mac);
		font-weight: 300;
	}

	.theme-mac-os-9 .retro-window-title,
	.theme-mac-os-9 .retro-button {
		font-family: var(--font-mac);
		font-size: 0.7em;
		font-weight: 100;
	}

	/* Web 1999 and Dark Retro themes */
	.theme-web-1999,
	.theme-dark-retro,
	.theme-web-1999 .retro-window-title,
	.theme-web-1999 .retro-button,
	.theme-dark-retro .retro-window-title,
	.theme-dark-retro .retro-button,
	.visitor-counter,
	.retro-badge {
		font-family: var(--font-main);
	}
</style>
